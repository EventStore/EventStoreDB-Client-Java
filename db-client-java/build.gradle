buildscript {
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.9.4'
        //classpath 'gradle.plugin.com.github.spotbugs.snom:spotbugs-gradle-plugin:4.4.4'
        classpath 'de.undercouch:gradle-download-task:5.5.0'
    }
}

plugins {
    id 'java-library'
    id 'com.google.protobuf' version '0.9.4'
    id 'idea'
    id 'maven-publish'
    id 'signing'
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ['-Xlint:deprecation', '-Xlint:unchecked']
}

group = 'com.eventstore'
version = '5.3.0'

java {
    withJavadocJar()
    withSourcesJar()
}

configurations {
    exposedRuntime {
        canBeResolved = false
        canBeConsumed = true
    }
}

dependencies {
    api "org.reactivestreams:reactive-streams:${reactiveStreamsApiVersion}"

    implementation "javax.annotation:javax.annotation-api:${annotationApiVersion}"
    implementation "javax.validation:validation-api:${validationApiVersion}"

    implementation "com.google.protobuf:protobuf-java:${protobufVersion}"
    implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"
    implementation 'com.google.errorprone:error_prone_annotations:2.23.0'
    implementation "io.grpc:grpc-netty-shaded:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation 'org.slf4j:slf4j-api:2.0.9'

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testImplementation "org.junit.platform:junit-platform-suite:1.10.0"
    testImplementation 'org.junit-pioneer:junit-pioneer:1.9.1'
    testImplementation 'io.reactivex.rxjava3:rxjava:3.1.8'
    testImplementation "org.reactivestreams:reactive-streams-tck:${reactiveStreamsApiVersion}"
    testImplementation "org.testcontainers:testcontainers:${testcontainersVersion}"
    testImplementation platform("com.fasterxml.jackson:jackson-bom:${jacksonVersion}")
    testImplementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    testImplementation "com.github.javafaker:javafaker:1.0.2"
    testImplementation 'org.slf4j:slf4j-simple:2.0.9'
}

tasks.withType(Test).configureEach {
    testLogging {
        events "PASSED", "SKIPPED", "FAILED"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true
        showStandardStreams = true
    }
}

tasks.register("generateCertificates", Exec) {
    description = "Generates SSL certificates to start a secured ESDB server"
    commandLine 'docker', 'compose', '--file', '../configure-tls-for-tests.yml', 'up'
}

tasks.register("startDockerCompose", Exec) {
    description = "Starts ESDB cluster"
    commandLine 'docker', 'compose', '--file', '../docker-compose.yml', 'up', '-d'
}

tasks.register("stopDockerCompose", Exec) {
    description = "Stop ESDB cluster"
    commandLine 'docker', 'compose', '--file', '../docker-compose.yml', 'down'
}


tasks.register("miscTests", Test) {
    useJUnitPlatform {
        include("**/MiscTests.class")
    }
}

tasks.register("singleNodeTests", Test) {
    useJUnitPlatform {
        include("**/StreamsTests.class")
        include("**/PersistentSubscriptionsTests.class")
        include("**/ExpectationsTests.class")
    }
}

tasks.register("secureNodeTests", Test) {
    dependsOn generateCertificates
    environment "SECURE", "true"

    useJUnitPlatform {
        include("**/StreamsTests.class")
        include("**/PersistentSubscriptionsTests.class")
    }
}

tasks.register("clusterTests", Test) {
    dependsOn startDockerCompose
    finalizedBy stopDockerCompose
    environment "SECURE", "true"
    environment "CLUSTER", "true"

    useJUnitPlatform {
        include("**/StreamsTests.class")
        include("**/PersistentSubscriptionsTests.class")
    }
}

tasks.register("ci", Test) {
    useJUnitPlatform()
}

test {
    dependsOn miscTests, singleNodeTests, secureNodeTests, clusterTests
}

protobuf {
    protoc {
        // The artifact spec for the Protobuf Compiler
        artifact = 'com.google.protobuf:protoc:3.13.0'
    }
    plugins {
        // Optional: an artifact spec for a protoc plugin, with "grpc" as
        // the identifier, which can be referred to in the "plugins"
        // container of the "generateProtoTasks" closure.
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        ofSourceSet('main')*.plugins {
            // Apply the "grpc" plugin whose spec is defined above, without
            // options.  Note the braces cannot be omitted, otherwise the
            // plugin will not be added. This is because of the implicit way
            // NamedDomainObjectContainer binds the methods.
            grpc { }
        }
    }
}

def isSnapshot = project.version.toString().endsWith("-SNAPSHOT")
def publishLogin = project.hasProperty("ossrhUsername") ? project.getProperties().get("ossrhUsername") : ""
def publishPassword = project.hasProperty("ossrhPassword") ? project.getProperties().get("ossrhPassword") : ""

javadoc {
    doFirst {
        options.addBooleanOption('-no-module-directories', true)
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'db-client-java'

            from components.java
            pom {
                name = 'EventStoreDB Client Java'
                // packaging 'jar'
                // optionally artifactId can be defined here
                description = 'EventStoreDB gRPC Java client'
                url = 'https://eventstore.com'

                scm {
                    connection = 'https://github.com/EventStore/EventStoreDB-Client-Java.git'
                    developerConnection = 'https://github.com/EventStore/EventStoreDB-Client-Java.git'
                    url = 'https://github.com/EventStore/EventStoreDB-Client-Java'
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'ylaupa'
                        name = 'Yorick Laupa'
                        email = 'yorick.laupa@eventstore.com'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            def releaseUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotUrl = 'https://oss.sonatype.org/content/repositories/snapshots'
            def finalUrl = isSnapshot ? snapshotUrl : releaseUrl

            name = 'Sonatype'
            url = finalUrl
            credentials {
                username = publishLogin
                password = publishPassword
            }
        }
    }
}

signing {
    useGpgCmd()
    sign configurations.archives
    sign publishing.publications.mavenJava
}

tasks.withType(Sign) {
    onlyIf {
        gradle.taskGraph.hasTask(":db-client-java:publish")
    }
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
